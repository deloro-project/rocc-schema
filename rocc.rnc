default namespace = "https://deloro.iit.academiaromana-is.ro/rocc"
datatypes xsd = "http://www.w3.org/2001/XMLSchema-datatypes"
namespace rnc = "http://relaxng.org/ns/compatibility/annotations/1.0"

grammar {
  start = ROCC

  # Root element of the ROCC file.
  ROCC = element ROCC { pageCollection+ }

  pageCollection = element pageCollection {
		       attribute id { text },
		       pageCollectionMetadata,
		       imagesOfPages,
		       segmentationOfImages?,
		       textsOfPages?,
		       letterAlignmentsImage2Text,
		       seqAlignmentsImage2Text
		   }

  pageCollectionMetadata = element pageCollectionMetadata{
			       attribute rocc_id { text },
			       attribute pageCollectionURL { xsd:anyURI },
			       attribute title { text },
			       attribute shortTitle { text },
			       attribute language { text },
			       attribute metadataCreator { xsd:anyURI },
			       attribute distribution { xsd:anyURI },
			       roccCode,
			       translation?,
			       scannedCopy,
			       creation,
			       publishing,
			       contentDescription,
			       formatDescription*
			   }

  imagesOfPages = element imagesOfPages{
		      onePageImage+
		  }

  segmentationOfImages = element segmentationOfImages {
			     graphicalObjectFrontispiece?,
			     pageSegmentation+
			 }

  textsOfPages = element textsOfPages{
		     attribute integralTranscribedTextFile { xsd:anyURI },
		     textPage+
		 }

  textPage = element textPage{
		 attribute pageID { text },
		 attribute textPageFile { xsd:anyURI }?,
		 attribute beginningOfPage { xsd:integer }?,
		 attribute endOfPage { xsd:integer }?
	     }

  letterAlignmentsImage2Text = element letterAlignmentsImage2Text {
				   letterOnePageAlignments+
			       }

  seqAlignmentsImage2Text = element seqAlignmentsImage2Text {
				sequenceOnePageAlignments+
			    }
  ## Represents the zone of the origin of the document.
  ## The value can any combination of the following:
  ## MD = Moldavia
  ## W  = Wallachia
  ## T  = Transylvania
  ## MM = Maramureș
  ## BT = Banat
  ## BS = Bessarabia (for dates between 1812 - 1899)
  roccCodeZone = list{ ("MD" | "W" | "T" | "MM" | "BT" | "BS")+ }

  roccCode = element ROCC-code {
		 attribute difficultyLevel { "1" | "2" | "3" },
		 ## Denotes the type of writing of the page collection.
		 ## Values for writingType attribute are:
		 ## - p  = print;
		 ## - u  = uncial;
		 ## - su = semiuncial;
		 ## - m  = manuscript.
		 attribute writingType { "p" | "u" | "su" | "m" },
		 ## Denotes the annotation of the page collection.
		 ## Values for annotationLevel attribute are:
		 ## - o = original, unannotated;
		 ## - g = gold - annotated fully or partially by experts;
		 ## - t = test - annotated by the application;
		 ## - m = mixt - annotated by both experts and applications.
		 attribute annotationLevel { "o" | "g" | "t" | "m" },
		 attribute century { "XVI" | "XVII" | "XVIII" | "XIX" },
		 attribute fiftyYears { "1" | "2" },
		 attribute printingYear { xsd:integer },
		 attribute zone { roccCodeZone }
	     }

  translation = element translation {
		    attribute originalAuthor { text }?,
		    attribute originalLanguage { text },
		    attribute secTranslator { text }?,
		    attribute translator { text }?
		}

  scannedCopy = element scannedCopy {
		    attribute library { text },
		    attribute libraryCode { text }
		}

  creation = element creation {
		 attribute creationYear { text },
		 author?,
		 secondaryAuthor*,
		 creationLocation?
             }

  author = element author {
	       attribute name { text }?,
	       attribute surname { text }?,
	       attribute content { text }?,
	       element addToName { text }?,
	       element bio { text }?
	   }

  secondaryAuthor = element secAuthor {
			attribute id { text },
			attribute name { text }?,
			attribute surname { text }?,
			attribute authority { text }?,
			element addToName {
			    attribute id { text },
			    text
			}?,
			element bio {
			    attribute id { text },
			    text
			}?
		    }

  creationLocation =  element creationLocation {
			  attribute creationProvince { "Moldova" | "Țara Românească" | "Transilvania" },
			  attribute creationTown { text }?
		      }

  publishing = element publishing {
		   attribute publishingYear { xsd:integer },
		   attribute publisher { text },
		   attribute noOfPagesOrSheets { xsd:integer },
		   attribute pageOrSheet { "page" | "sheet" },
		   element dimensions {
		       attribute units { "mm" | "cm" },
		       attribute width { xsd:decimal },
		       attribute height { xsd:decimal }
		   },
		   publishingLocation?
               }

  publishingLocation = element publishingLocation {
			   attribute publishingProvince { "Moldova" | "Țara Românească" | "Basarabia" | "Transilvania" },
			   attribute publishingTown { text }?,
			   element publishingHouse {
			       attribute id { text },
			       text
			   }?,
			   element publishingCountry {
			       attribute id { text },
			       text
			   }?
		       }

  contentDescription = element contentDescription {
			   attribute style { text },
			   element subject { text }?
		       }

  formatDescription = element formatDescription {
			  element content {
			      attribute id { text },
			      text
			  }
		      }

  onePageImage = element onePageImage {
		     attribute pageID { text },
		     attribute pageName { text },
		     attribute pageImageFile { xsd:anyURI },
		     difficultyCriteria
		 }

  difficultyCriteria = element difficultyCriteria {
			   attribute damaged { xsd:boolean },
			   attribute opaqueSpots { xsd:boolean },
			   attribute transparentPaper { xsd:boolean },
			   attribute overlayPrint { xsd:boolean }?,
			   attribute interlineWriting { xsd:boolean },
			   attribute palimpsest { xsd:boolean },
			   attribute corrections { "none" | "few" | "many" },
			   attribute marginalWriting { "none" | "few" | "many" }
		       }

  graphicalObjectFrontispiece = element graphicalObjectFrontispiece {
				    attribute objectAnnotator { text },
				    attribute objectId { text },
				    objectCoordinates
				}

  pageSegmentation = element pageSegmentation {
			 attribute pageID { text },
			 (title
			 & column
			 & line
			 & letter
			 & marginalRemark
			 & outOfLineLetter
			 & modifier
			 & initialLetter
			 & referenceMarkOnMargin
			 & referenceMarkAboveLine
			 & accolade
			 & ornament
			 & frame)*
		     }

  title = element objectTitle {
	      attribute objectId { text },
	      attribute objectAnnotator { text },
	      attribute objectContent { text }?,
	      objectCoordinates
	  }

  column = element objectColumn {
	       attribute columnPosition { "U" | "L" | "R"},
	       attribute objectAnnotator { text },
	       attribute objectId { text },
	       objectCoordinates
	   }

  line = element objectLine {
	     attribute objectId { text },
	     attribute objectAnnotator { text },
	     attribute objectContent { text }?,
	     attribute inColumn { "header" | "footer" | "ordinary" }?,
	     objectCoordinates
	 }

  letter = element objectLetter {
	       attribute objectAnnotator { text },
	       attribute objectContent { text }?,
	       attribute objectId { text },
	       attribute objectAccuracy {xsd:decimal}?,
	       objectCoordinates
	   }

  marginalRemark = element objectMarginal {
		       attribute objectAnnotator { text },
		       attribute objectContent { text }?,
		       attribute objectId { text },
		       objectCoordinates
		   }

  outOfLineLetter = element objectOutOfLineLetters {
			attribute objectId { text },
			attribute objectAnnotator { text },
			attribute objectContent { text }?,
			objectCoordinates
		    }

  modifier = element objectModifier {
		 attribute objectId { text },
		 attribute objectAnnotator { text },
		 attribute objectContent { text }?,
		 objectCoordinates
	     }


  initialLetter = element objectInitialLetter {
		      attribute objectId { text },
		      attribute objectAnnotator { text },
		      attribute objectContent { text }?,
		      objectCoordinates
		  }

  referenceMarkOnMargin = element objectReferenceMarkOnMargin {
			      attribute objectId { text },
			      attribute objectAnnotator { text },
			      attribute objectContent { text }?,
			      objectCoordinates
			  }

  referenceMarkAboveLine = element objectReferenceMarkAboveLine {
			       attribute objectId { text },
			       attribute objectAnnotator { text },
			       attribute objectContent { text }?,
			       objectCoordinates
			   }

  accolade = element graphicalObjectAccolade {
		 attribute objectId { text },
		 attribute objectAnnotator { text },
		 accoladeCoordinates
	     }

  ornament = element graphicalObjectOrnament {
		 attribute objectId { text },
		 attribute objectAnnotator { text },
		 objectCoordinates
	     }

  frame = element graphicalObjectFrame {
	      attribute objectId { text },
	      attribute objectAnnotator { text },
	      frameCoordinates
	  }

  objectCoordinates = element objectCoordinates {
			  attribute leftUpHoriz { xsd:decimal },
			  attribute leftUpVert { xsd:decimal },
			  attribute rightDownHoriz { xsd:decimal },
			  attribute rightDownVert { xsd:decimal }
		      }

  accoladeCoordinates = element objectCoordinates{
			    attribute leftUpHoriz { xsd:decimal },
			    attribute leftUpVert { xsd:decimal },
			    attribute rightDownHoriz { xsd:decimal },
			    attribute rightDownVert { xsd:decimal },
			    attribute direction { "right" | "left" },
			    attribute horizCoordOfPeak { xsd:decimal },
			    attribute vertCoordOfPeak { xsd:decimal }
			}

    frameCoordinates = element objectCoordinates {
			   attribute extFrameLeftUpHoriz { xsd:decimal },
			   attribute extFrameLeftUpVert { xsd:decimal },
			   attribute extFrameRightDownHoriz { xsd:decimal },
			   attribute extFrameRightDownVert { xsd:decimal },
			   attribute intFrameLeftUpHoriz { xsd:decimal },
			   attribute intFrameLeftUpVert { xsd:decimal },
			   attribute intFrameRightDownHoriz { xsd:decimal },
			   attribute intFrameRightDownVert { xsd:decimal }
		       }

    letterOnePageAlignments = element onePageAlignments {
				  attribute pageID { text },
				  element letterAlignment {
				      attribute characterOffset { xsd:integer },
				      attribute goldTestAligment { "test" | "gold" },
				      attribute length { xsd:integer },
				      attribute letterId { text }
				  }
			      }

    sequenceOnePageAlignments =   element onePageAlignments {
				      attribute pageID { text },
				      element seqAlignment {
					  attribute goldTestAligment { "test" | "gold" },
					  attribute seqCharLength { xsd:integer },
					  attribute seqCharOffset { xsd:integer },
					  attribute seqLetterIds { text },
					  attribute seqLetterLength { xsd:integer }
				      }
				  }
}
